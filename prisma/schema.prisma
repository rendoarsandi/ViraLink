// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User profiles table
model Profile {
  id        String   @id @default(cuid())
  name      String?
  email     String?  @unique
  userType  String   @map("user_type")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  createdCampaigns   Campaign[]         @relation("CreatorCampaigns")
  promoterCampaigns  PromoterCampaign[] @relation("PromoterCampaigns")

  @@map("profiles")
}

// Campaigns table
model Campaign {
  id             String   @id @default(cuid())
  creatorId      String   @map("creator_id")
  title          String
  description    String?
  objective      String?
  budget         Int?     @default(0)
  rewardModel    String?  @map("reward_model")
  rewardRate     Int?     @default(0) @map("reward_rate")
  contentLink    String?  @map("content_link")
  instructions   String?
  status         String   @default("active")
  promotersCount Int      @default(0) @map("promoters_count")
  clicksCount    Int      @default(0) @map("clicks_count")
  spentBudget    Int      @default(0) @map("spent_budget")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  creator           Profile            @relation("CreatorCampaigns", fields: [creatorId], references: [id], onDelete: Cascade)
  promoterCampaigns PromoterCampaign[] @relation("CampaignPromoters")

  @@map("campaigns")
}

// Junction table for promoters and campaigns
model PromoterCampaign {
  id           String   @id @default(cuid())
  promoterId   String   @map("promoter_id")
  campaignId   String   @map("campaign_id")
  trackingLink String   @unique @map("tracking_link")
  joinedAt     DateTime @default(now()) @map("joined_at")
  status       String   @default("joined") // 'joined', 'active', 'paused', 'completed'
  clicks       Int      @default(0)
  earnings     Int      @default(0)

  // Relations
  promoter Profile  @relation("PromoterCampaigns", fields: [promoterId], references: [id], onDelete: Cascade)
  campaign Campaign @relation("CampaignPromoters", fields: [campaignId], references: [id], onDelete: Cascade)

  // Unique constraint for promoter-campaign combination
  @@unique([promoterId, campaignId], name: "unique_promoter_campaign")
  @@map("promoter_campaigns")
}

// BetterAuth tables - these will be automatically managed by BetterAuth
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  emailVerified Boolean @default(false) @map("email_verified")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  accounts Account[]
  sessions Session[]

  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime @map("expires_at")
  token     String   @unique
  userId    String   @map("user_id")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                String   @id @default(cuid())
  accountId         String   @map("account_id")
  providerId        String   @map("provider_id")
  userId            String   @map("user_id")
  accessToken       String?  @map("access_token")
  refreshToken      String?  @map("refresh_token")
  idToken           String?  @map("id_token")
  accessTokenExpiresAt DateTime? @map("access_token_expires_at")
  refreshTokenExpiresAt DateTime? @map("refresh_token_expires_at")
  scope             String?
  password          String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime @map("expires_at")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("verification")
}
